{"version":3,"sources":["components/HanziBox/index.ts","components/HanziBox/HanziBox.tsx","components/HanziRow/index.ts","components/HanziRow/HanziRow.tsx","components/Selector/index.ts","components/Selector/Selector.tsx","components/SelectorPanel/index.ts","components/SelectorPanel/SelectorPanel.tsx","hooks/useDebouncedValue.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["HanziBox","character","className","HanziRow","boxes","meaning","reading","onRemove","onClick","Array","fill","map","_","index","key","Selector","props","value","selected","color","style","SelectorPanel","data","filterOption","filterOptions","setFilterOption","selectedData","setSelectedData","useState","searchQuery","setSearchQuery","debouncedSearchQuery","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebouncedValue","searchedData","FuzzySearch","sort","search","console","log","onChange","event","target","name","newSet","Set","forEach","entry","add","delete","isSelected","has","hanziMap","Map","invalidHanzi","pinyin","rawData","datum","set","App","selectedHanzi","setSelectedHanzi","filteredData","useMemo","hskLevel","parseInt","charAt","length","filter","hsk","filterData","MemoizedHanziRow","useCallback","from","hanzi","get","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64a60186.chunk.js","sourcesContent":["import HanziBox from \"./HanziBox\";\n\nexport default HanziBox;\n","import React from \"react\";\nimport \"./HanziBox.css\";\n\ntype Props = {\n  character: string;\n};\n\nconst HanziBox: React.FC<Props> = ({ character }: Props) => {\n  return <div className=\"hanzi-box\">{character}</div>;\n};\n\nexport default HanziBox;\n","import HanziRow from './HanziRow';\n\nexport * from './HanziRow'\nexport default HanziRow;\n","import React from \"react\";\n\nimport HanziBox from \"../HanziBox\";\nimport \"./HanziRow.css\";\n\nexport type Props = {\n  boxes: number;\n  character: string;\n  meaning: string;\n  reading: string;\n  onRemove: () => void;\n};\n\nconst HanziRow: React.FC<Props> = ({\n  boxes,\n  character,\n  meaning,\n  reading,\n  onRemove\n}: Props) => {\n  return (\n    <div className=\"hanzi-row\">\n      <div className=\"details\">\n        <p className=\"detail-text\">\n          <span>MEANING:</span> {meaning}\n        </p>\n        <p className=\"detail-text\">\n          <span>READING:</span> {reading}\n        </p>\n        <button className=\"remove-button\" onClick={onRemove}>Ã—</button>\n      </div>\n      <div className=\"boxes\">\n        {new Array(boxes).fill(0).map((_, index) => (\n          <HanziBox key={index} character={index < 3 ? character : \"\"} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default HanziRow;\n","import Selector from \"./Selector\";\n\nexport * from './Selector';\nexport default Selector;\n","import React from \"react\";\n\nimport \"./Selector.css\";\n\nexport type Props = {\n  value: string;\n  selected: boolean;\n  onClick: () => void;\n};\n\nconst Selector: React.FC<Props> = (props: Props) => {\n  const { value, selected, onClick } = props;\n  const color = selected ? \"#f00\" : \"black\";\n\n  return (\n    <div className=\"selector\" style={{ color }} onClick={onClick}>\n      {value}\n    </div>\n  );\n};\n\nexport default Selector;\n","import SelectorPanel from \"./SelectorPanel\";\n\nexport * from './SelectorPanel';\nexport default SelectorPanel;\n","import React, { useEffect, useState } from \"react\";\nimport FuzzySearch from \"fuzzy-search\";\n\nimport useDebouncedValue from '../../hooks/useDebouncedValue';\nimport Selector from \"../Selector\";\nimport \"./SelectorPanel.css\";\n\nexport type FilterOptions = { name: string, value: string }[];\n\nexport type Props = {\n  data: { value: string, [ other: string ]: any }[];\n  filterOption: string,\n  filterOptions: FilterOptions,\n  setFilterOption: Function;\n  selectedData: Set<string>;\n  setSelectedData: Function;\n};\n\nconst SEARCH_DELAY = 250;\n\nconst SelectorPanel: React.FC<Props> = ({\n  data,\n  filterOption,\n  filterOptions,\n  setFilterOption,\n  selectedData,\n  setSelectedData\n}: Props) => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const debouncedSearchQuery = useDebouncedValue(searchQuery, SEARCH_DELAY);\n  const searcher = new FuzzySearch(data, [\"meaning\"], { sort: true });\n  const searchedData = searcher.search(debouncedSearchQuery);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) =>\n    setFilterOption(event.target.value);\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  console.log('Rendering SelectorPanel');\n\n  useEffect(() => {\n    console.log('Rendered SelectorPanel');\n  })\n\n  const handleSelectAll = () => {\n    const newSet = new Set(selectedData);\n    searchedData.forEach(entry => newSet.add(entry.value));\n    setSelectedData(newSet);\n  }\n\n  const handleRemoveSelected = () => {\n    const newSet = new Set(selectedData);\n    searchedData.forEach(entry => newSet.delete(entry.value));\n    setSelectedData(newSet);\n  }\n\n  const handleOnClick = (selected: boolean, value: string) => {\n    if (selected) {\n      return () => {\n        const newSet = new Set(selectedData);\n        if (newSet.delete(value)) setSelectedData(newSet);\n      }\n    } else { \n      return () => setSelectedData(new Set(selectedData).add(value));\n    }\n  }\n\n  return (\n    <div className=\"selector-panel\">\n      <div className=\"select-tool\">\n        <p>Search: </p>\n        <input value={searchQuery} onChange={handleSearch} />\n      </div>\n      <div className=\"select-tool\">\n        <p>Filter: </p>\n        <select value={filterOption} onChange={handleChange}>\n          { filterOptions.map(({ name, value }) => <option key={value} value={value}>{name}</option>)}\n        </select>\n        <button onClick={handleSelectAll}>Select all</button>\n        <button onClick={handleRemoveSelected}>Remove selected</button>\n      </div>\n      <div className=\"view\">\n        {searchedData.map(entry => {\n          const isSelected = selectedData.has(entry.value);\n          return (\n            <Selector\n              value={entry.value}\n              selected={isSelected}\n              onClick={handleOnClick(isSelected, entry.value)}\n            />\n         )})}\n      </div>\n    </div>\n  );\n};\n\nexport default SelectorPanel;\n","import { useEffect, useState } from 'react';\n\nexport default function useDebouncedValue(value: any, delay: number) {\n    const [ debouncedValue, setDebouncedValue ] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value)\n        }, delay);\n\n        return () => clearTimeout(handler);\n    }, [value, delay]);\n\n    return debouncedValue;\n}","import React, { useState, useEffect, useMemo, useCallback } from \"react\";\n\nimport HanziRow, { Props as HanziRowProps } from \"./components/HanziRow\";\nimport SelectorPanel, { FilterOptions } from \"./components/SelectorPanel\";\n\nimport rawData from \"./data/hanzi.json\";\nimport \"./App.css\";\n\nimport { HanziData } from \"./types\";\n\nconst hanziMap = new Map<string, HanziData>();\nconst invalidHanzi = {\n  character: \"\",\n  pinyin: \"INVALID\",\n  meaning: \"INVALID\",\n  reading: \"INVALID\"\n};\n\nconst data = rawData.map(datum => ({ ...datum, value: datum.character }));\ndata.forEach(entry => hanziMap.set(entry.character, entry));\n\nconst filterOptions: FilterOptions = [\n  { name: 'Hanzi Frequency', value: 'freq'},\n  { name: 'HSK 1', value: 'hsk1'}, \n  { name: 'HSK 2', value: 'hsk2'}, \n  { name: 'HSK 3', value: 'hsk3'}, \n  { name: 'HSK 4', value: 'hsk4'}, \n  { name: 'HSK 5', value: 'hsk5'}, \n  { name: 'HSK 6', value: 'hsk6'}\n]\n\nfunction filterData(filterOption: string) {\n  console.log('filtering')\n  if (filterOption === 'freq') return data;\n  \n  const hskLevel = parseInt(filterOption.charAt(filterOption.length - 1));\n  return data.filter(entry => entry.hsk === hskLevel);\n}\n\nconst App: React.FC = () => {\n  const [selectedHanzi, setSelectedHanzi] = useState<Set<string>>(new Set());\n  const [filterOption, setFilterOption] = useState(filterOptions[0].value);\n\n  useEffect(() => {\n    console.log('Rendering App')\n  });\n\n  const filteredData = useMemo(() => filterData(filterOption), [filterOption]);\n\n  const MemoizedHanziRow = (props: Omit<HanziRowProps, 'onRemove'>) => {\n    const onRemove = useCallback(() => \n      setSelectedHanzi(selectedHanzi => {\n      const newSet = new Set(selectedHanzi);\n      newSet.delete(props.character);\n      return newSet;\n    }), [props.character]);\n\n    return <HanziRow {...props} onRemove={onRemove} />\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Hanzi Worksheets</h1>\n        {Array.from(selectedHanzi).map(entry => {\n          const hanzi = hanziMap.get(entry) || invalidHanzi;\n          return (\n            <MemoizedHanziRow\n              key={hanzi.character}\n              boxes={18}\n              character={hanzi.character}\n              meaning={hanzi.meaning}\n              reading={hanzi.pinyin}\n            />\n          );\n        })}\n        <SelectorPanel\n          data={filteredData}\n          filterOption={filterOption}\n          filterOptions={filterOptions}\n          setFilterOption={setFilterOption}\n          selectedData={selectedHanzi}\n          setSelectedData={setSelectedHanzi}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}