{"version":3,"sources":["components/HanziBox/index.ts","components/HanziBox/HanziBox.tsx","components/HanziRow/index.ts","components/HanziRow/HanziRow.tsx","components/Selector/index.ts","components/Selector/Selector.tsx","components/SelectorPanel/SelectorPanel.tsx","components/SelectorPanel/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["HanziBox","character","className","HanziRow","boxes","meaning","reading","onRemove","onClick","Array","fill","map","_","index","key","Selector","props","selected","color","style","SelectorPanel","timeout","data","selectedHanzi","useState","view","setView","searchQuery","setSearchQuery","filteredData","sort","entry","frequency_rank","filter","hsk","filterData","searchedData","setSearchedData","searcher","FuzzySearch","useEffect","search","value","onChange","event","clearTimeout","query","currentTarget","setTimeout","has","hanziMap","Map","invalidHanzi","pinyin","forEach","set","App","hanziList","setHanziList","hanzi","get","h","Set","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa3d63f7.chunk.js","sourcesContent":["import HanziBox from \"./HanziBox\";\n\nexport default HanziBox;\n","import React from \"react\";\nimport \"./HanziBox.css\";\n\ntype Props = {\n  character: string;\n};\n\nconst HanziBox: React.FC<Props> = ({ character }: Props) => {\n  return <div className=\"hanzi-box\">{character}</div>;\n};\n\nexport default HanziBox;\n","import HanziRow from \"./HanziRow\";\n\nexport default HanziRow;\n","import React from \"react\";\n\nimport HanziBox from \"../HanziBox\";\nimport \"./HanziRow.css\";\n\ntype Props = {\n  boxes: number;\n  character: string;\n  meaning: string;\n  reading: string;\n  onRemove: () => void;\n};\n\nconst HanziRow: React.FC<Props> = ({\n  boxes,\n  character,\n  meaning,\n  reading,\n  onRemove\n}: Props) => {\n  return (\n    <div className=\"hanzi-row\">\n      <div className=\"details\">\n        <p className=\"detail-text\">\n          <span>MEANING:</span> {meaning}\n        </p>\n        <p className=\"detail-text\">\n          <span>READING:</span> {reading}\n        </p>\n        <button className=\"remove-button\" onClick={onRemove}>Ã—</button>\n      </div>\n      <div className=\"boxes\">\n        {new Array(boxes).fill(0).map((_, index) => (\n          <HanziBox key={index} character={index < 3 ? character : \"\"} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default HanziRow;\n","import Selector from \"./Selector\";\n\nexport default Selector;\n","import React from \"react\";\n\nimport \"./Selector.css\";\n\ntype Props = {\n  character: string;\n  selected: boolean;\n  onClick: (selected: boolean) => void;\n};\n\nconst Selector: React.FC<Props> = (props: Props) => {\n  const { character, selected, onClick } = props;\n  const color = selected ? \"#f00\" : \"black\";\n\n  const handleOnClick = () => onClick(!selected);\n\n  return (\n    <div className=\"selector\" style={{ color }} onClick={handleOnClick}>\n      {character}\n    </div>\n  );\n};\n\nexport default Selector;\n","import React, { useState, useEffect } from \"react\";\nimport FuzzySearch from \"fuzzy-search\";\n\nimport Selector from \"../Selector\";\nimport { HanziData } from \"../../types\";\nimport \"./SelectorPanel.css\";\n\nexport type Props = {\n  data: HanziData[];\n  selectedHanzi: Set<string>;\n  onClick: (selected: boolean, hanzi: string) => void;\n};\n\ntype FilterView = \"freq\" | \"hsk1\" | \"hsk2\" | \"hsk3\" | \"hsk4\" | \"hsk5\" | \"hsk6\";\n\nfunction filterData(data: HanziData[], view: FilterView) {\n  switch (view) {\n    case \"freq\":\n      return [...data].sort(entry => entry.frequency_rank);\n    case \"hsk1\":\n      return data.filter(entry => entry.hsk === 1);\n    case \"hsk2\":\n      return data.filter(entry => entry.hsk === 2);\n    case \"hsk3\":\n      return data.filter(entry => entry.hsk === 3);\n    case \"hsk4\":\n      return data.filter(entry => entry.hsk === 4);\n    case \"hsk5\":\n      return data.filter(entry => entry.hsk === 5);\n    case \"hsk6\":\n      return data.filter(entry => entry.hsk === 6);\n  }\n}\n\nconst SelectorPanel: React.FC<Props> = ({\n  data,\n  onClick,\n  selectedHanzi\n}: Props) => {\n  const [view, setView] = useState<FilterView>(\"freq\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const filteredData = filterData(data, view);\n  const [searchedData, setSearchedData] = useState<HanziData[]>(filteredData);\n  const searcher = new FuzzySearch(filteredData, [\"meaning\"], { sort: true });\n  let timeout: NodeJS.Timeout | undefined;\n\n  useEffect(() => {\n    setSearchedData(searcher.search(searchQuery));\n  }, [view]);\n\n  const handleChange = (event: React.FormEvent<HTMLSelectElement>) =>\n    setView(event.currentTarget.value as FilterView);\n\n  const handleSearch = (event: React.FormEvent<HTMLInputElement>) => {\n    if (timeout) clearTimeout(timeout);\n\n    const query = event.currentTarget.value;\n    setSearchQuery(query);\n\n    timeout = setTimeout(() => {\n      setSearchedData(searcher.search(query));\n    }, 700);\n  };\n\n  return (\n    <div className=\"selector-panel\">\n      <div className=\"select-tool\">\n        <p>Search: </p>\n        <input value={searchQuery} onChange={handleSearch} />\n      </div>\n      <div className=\"select-tool\">\n        <p>Filter: </p>\n        <select value={view} onChange={handleChange}>\n          <option value=\"freq\">Hanzi Frequency</option>\n          <option value=\"hsk1\">HSK 1</option>\n          <option value=\"hsk2\">HSK 2</option>\n          <option value=\"hsk3\">HSK 3</option>\n          <option value=\"hsk4\">HSK 4</option>\n          <option value=\"hsk5\">HSK 5</option>\n          <option value=\"hsk6\">HSK 6</option>\n        </select>\n      </div>\n      <div className=\"view\">\n        {searchedData.map(entry => (\n          <Selector\n            key={entry.character}\n            character={entry.character}\n            selected={selectedHanzi.has(entry.character)}\n            onClick={selected => onClick(selected, entry.character)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SelectorPanel;\n","import SelectorPanel from \"./SelectorPanel\";\n\nexport default SelectorPanel;\n","import React, { useState } from \"react\";\n\nimport HanziRow from \"./components/HanziRow\";\nimport SelectorPanel from \"./components/SelectorPanel\";\n\nimport data from \"./data/hanzi.json\";\nimport \"./App.css\";\n\nimport { HanziData } from \"./types\";\n\nconst hanziMap = new Map<string, HanziData>();\nconst invalidHanzi = {\n  character: \"\",\n  pinyin: \"INVALID\",\n  meaning: \"INVALID\",\n  reading: \"INVALID\"\n};\n\ndata.forEach(entry => hanziMap.set(entry.character, entry));\n\nconst App: React.FC = () => {\n  const [hanziList, setHanziList] = useState<string[]>([]);\n\n  const onClick = (selected: boolean, hanzi: string) => {\n    if (selected) {\n      setHanziList(hanziList => [...hanziList, hanzi]);\n    } else {\n      setHanziList(hanziList => hanziList.filter(h => h !== hanzi));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Hanzi Worksheets</h1>\n        {hanziList.map(entry => {\n          const hanzi = hanziMap.get(entry) || invalidHanzi;\n          return (\n            <HanziRow\n              key={hanzi.character}\n              boxes={18}\n              character={hanzi.character}\n              meaning={hanzi.meaning}\n              reading={hanzi.pinyin}\n              onRemove={\n                () => setHanziList(hanziList => hanziList.filter(h => h !== hanzi.character))\n              }\n            />\n          );\n        })}\n        <SelectorPanel\n          data={data}\n          selectedHanzi={new Set(hanziList)}\n          onClick={onClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}